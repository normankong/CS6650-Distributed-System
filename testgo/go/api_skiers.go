/*
 * Ski Data API for NEU Seattle distributed systems course
 *
 * An API for an emulation of skier managment system for RFID tagged lift tickets. Basis for CS6650 Assignments for 2019
 *
 * API version: 1.16
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type ContactForm struct {
	Email   string
	Message string
}

func GetSkierDayVertical(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	params := mux.Vars(r)
	_, err := strconv.Atoi(params["resortID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}

	_, err = strconv.Atoi(params["seasonID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}

	_, err = strconv.Atoi(params["dayID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}

	_, err = strconv.Atoi(params["skierID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}
	w.WriteHeader(http.StatusOK)
}

func GetSkierResortTotals(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	params := mux.Vars(r)
	_, err := strconv.Atoi(params["skierID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}
	w.WriteHeader(http.StatusOK)
}

func WriteNewLiftRide(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	params := mux.Vars(r)
	_, err := strconv.Atoi(params["resortID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}

	_, err = strconv.Atoi(params["seasonID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}

	_, err = strconv.Atoi(params["dayID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}

	_, err = strconv.Atoi(params["skierID"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte("invalid ID"))
	}
	p := new(ContactForm)
	err = json.NewDecoder(r.Body).Decode(&p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	w.WriteHeader(http.StatusCreated)
}
